{"ast":null,"code":"/**!\n * lg-zoom.js | 1.2.0 | May 20th 2020\n * http://sachinchoolur.github.io/lg-zoom.js\n * Copyright (c) 2016 Sachin N; \n * @license GPLv3 \n */\n(function (f) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], f);\n  } else {\n    var g;\n\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    } else if (typeof self !== \"undefined\") {\n      g = self;\n    } else {\n      g = this;\n    }\n\n    g.LgZoom = f();\n  }\n})(function () {\n  var define, module, exports;\n  return function () {\n    function r(e, n, t) {\n      function o(i, f) {\n        if (!n[i]) {\n          if (!e[i]) {\n            var c = \"function\" == typeof require && require;\n            if (!f && c) return c(i, !0);\n            if (u) return u(i, !0);\n            var a = new Error(\"Cannot find module '\" + i + \"'\");\n            throw a.code = \"MODULE_NOT_FOUND\", a;\n          }\n\n          var p = n[i] = {\n            exports: {}\n          };\n          e[i][0].call(p.exports, function (r) {\n            var n = e[i][1][r];\n            return o(n || r);\n          }, p, p.exports, r, e, n, t);\n        }\n\n        return n[i].exports;\n      }\n\n      for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) {\n        o(t[i]);\n      }\n\n      return o;\n    }\n\n    return r;\n  }()({\n    1: [function (require, module, exports) {\n      (function (global, factory) {\n        if (typeof define === \"function\" && define.amd) {\n          define([], factory);\n        } else if (typeof exports !== \"undefined\") {\n          factory();\n        } else {\n          var mod = {\n            exports: {}\n          };\n          factory();\n          global.lgZoom = mod.exports;\n        }\n      })(this, function () {\n        'use strict';\n\n        var _extends = Object.assign || function (target) {\n          for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            for (var key in source) {\n              if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n              }\n            }\n          }\n\n          return target;\n        };\n\n        var getUseLeft = function getUseLeft() {\n          var useLeft = false;\n          var isChrome = navigator.userAgent.match(/Chrom(e|ium)\\/([0-9]+)\\./);\n\n          if (isChrome && parseInt(isChrome[2], 10) < 54) {\n            useLeft = true;\n          }\n\n          return useLeft;\n        };\n\n        var zoomDefaults = {\n          scale: 1,\n          zoom: true,\n          actualSize: true,\n          enableZoomAfter: 300,\n          useLeftForZoom: getUseLeft()\n        };\n\n        var Zoom = function Zoom(element) {\n          this.el = element;\n          this.core = window.lgData[this.el.getAttribute('lg-uid')];\n          this.core.s = _extends({}, zoomDefaults, this.core.s);\n\n          if (this.core.s.zoom && this.core.doCss()) {\n            this.init(); // Store the zoomable timeout value just to clear it while closing\n\n            this.zoomabletimeout = false; // Set the initial value center\n\n            this.pageX = window.innerWidth / 2;\n            this.pageY = window.innerHeight / 2 + (document.documentElement.scrollTop || document.body.scrollTop);\n          }\n\n          return this;\n        };\n\n        Zoom.prototype.init = function () {\n          var _this = this;\n\n          var zoomIcons = '<button aria-label=\"Zoom in\" id=\"lg-zoom-in\" class=\"lg-icon\"></button><button aria-label=\"Zoom out\" id=\"lg-zoom-out\" class=\"lg-icon\"></button>';\n\n          if (_this.core.s.actualSize) {\n            zoomIcons += '<button aria-label=\"Actual size\" id=\"lg-actual-size\" class=\"lg-icon\"></button>';\n          }\n\n          if (_this.core.s.useLeftForZoom) {\n            utils.addClass(_this.core.outer, 'lg-use-left-for-zoom');\n          } else {\n            utils.addClass(_this.core.outer, 'lg-use-transition-for-zoom');\n          }\n\n          this.core.outer.querySelector('.lg-toolbar').insertAdjacentHTML('beforeend', zoomIcons); // Add zoomable class\n\n          utils.on(_this.core.el, 'onSlideItemLoad.lgtmzoom', function (event) {\n            // delay will be 0 except first time\n            var _speed = _this.core.s.enableZoomAfter + event.detail.delay; // set _speed value 0 if gallery opened from direct url and if it is first slide\n\n\n            if (utils.hasClass(document.body, 'lg-from-hash') && event.detail.delay) {\n              // will execute only once\n              _speed = 0;\n            } else {\n              // Remove lg-from-hash to enable starting animation.\n              utils.removeClass(document.body, 'lg-from-hash');\n            }\n\n            _this.zoomabletimeout = setTimeout(function () {\n              utils.addClass(_this.core.___slide[event.detail.index], 'lg-zoomable');\n            }, _speed + 30);\n          });\n          var scale = 1;\n          /**\n           * @desc Image zoom\n           * Translate the wrap and scale the image to get better user experience\n           *\n           * @param {String} scaleVal - Zoom decrement/increment value\n           */\n\n          var zoom = function zoom(scaleVal) {\n            var image = _this.core.outer.querySelector('.lg-current .lg-image');\n\n            var _x;\n\n            var _y; // Find offset manually to avoid issue after zoom\n\n\n            var offsetX = (window.innerWidth - image.clientWidth) / 2;\n            var offsetY = (window.innerHeight - image.clientHeight) / 2 + (document.documentElement.scrollTop || document.body.scrollTop);\n            _x = _this.pageX - offsetX;\n            _y = _this.pageY - offsetY;\n            var x = (scaleVal - 1) * _x;\n            var y = (scaleVal - 1) * _y;\n            utils.setVendor(image, 'Transform', 'scale3d(' + scaleVal + ', ' + scaleVal + ', 1)');\n            image.setAttribute('data-scale', scaleVal);\n\n            if (_this.core.s.useLeftForZoom) {\n              image.parentElement.style.left = -x + 'px';\n              image.parentElement.style.top = -y + 'px';\n            } else {\n              utils.setVendor(image.parentElement, 'Transform', 'translate3d(-' + x + 'px, -' + y + 'px, 0)');\n            }\n\n            image.parentElement.setAttribute('data-x', x);\n            image.parentElement.setAttribute('data-y', y);\n          };\n\n          var callScale = function callScale() {\n            if (scale > 1) {\n              utils.addClass(_this.core.outer, 'lg-zoomed');\n            } else {\n              _this.resetZoom();\n            }\n\n            if (scale < 1) {\n              scale = 1;\n            }\n\n            zoom(scale);\n          };\n\n          var actualSize = function actualSize(event, image, index, fromIcon) {\n            var w = image.clientWidth;\n            var nw;\n\n            if (_this.core.s.dynamic) {\n              nw = _this.core.s.dynamicEl[index].width || image.naturalWidth || w;\n            } else {\n              nw = _this.core.items[index].getAttribute('data-width') || image.naturalWidth || w;\n            }\n\n            var _scale;\n\n            if (utils.hasClass(_this.core.outer, 'lg-zoomed')) {\n              scale = 1;\n            } else {\n              if (nw > w) {\n                _scale = nw / w;\n                scale = _scale || 2;\n              }\n            }\n\n            if (fromIcon) {\n              _this.pageX = window.innerWidth / 2;\n              _this.pageY = window.innerHeight / 2 + (document.documentElement.scrollTop || document.body.scrollTop);\n            } else {\n              _this.pageX = event.pageX || event.targetTouches[0].pageX;\n              _this.pageY = event.pageY || event.targetTouches[0].pageY;\n            }\n\n            callScale();\n            setTimeout(function () {\n              utils.removeClass(_this.core.outer, 'lg-grabbing');\n              utils.addClass(_this.core.outer, 'lg-grab');\n            }, 10);\n          };\n\n          var tapped = false; // event triggered after appending slide content\n\n          utils.on(_this.core.el, 'onAferAppendSlide.lgtmzoom', function (event) {\n            var index = event.detail.index; // Get the current element\n\n            var image = _this.core.___slide[index].querySelector('.lg-image');\n\n            if (!_this.core.isTouch) {\n              utils.on(image, 'dblclick', function (event) {\n                actualSize(event, image, index);\n              });\n            }\n\n            if (_this.core.isTouch) {\n              utils.on(image, 'touchstart', function (event) {\n                if (!tapped) {\n                  tapped = setTimeout(function () {\n                    tapped = null;\n                  }, 300);\n                } else {\n                  clearTimeout(tapped);\n                  tapped = null;\n                  actualSize(event, image, index);\n                }\n\n                event.preventDefault();\n              });\n            }\n          }); // Update zoom on resize and orientationchange\n\n          utils.on(window, 'resize.lgzoom scroll.lgzoom orientationchange.lgzoom', function () {\n            _this.pageX = window.innerWidth / 2;\n            _this.pageY = window.innerHeight / 2 + (document.documentElement.scrollTop || document.body.scrollTop);\n            zoom(scale);\n          });\n          utils.on(document.getElementById('lg-zoom-out'), 'click.lg', function () {\n            if (_this.core.outer.querySelector('.lg-current .lg-image')) {\n              scale -= _this.core.s.scale;\n              callScale();\n            }\n          });\n          utils.on(document.getElementById('lg-zoom-in'), 'click.lg', function () {\n            if (_this.core.outer.querySelector('.lg-current .lg-image')) {\n              scale += _this.core.s.scale;\n              callScale();\n            }\n          });\n          utils.on(document.getElementById('lg-actual-size'), 'click.lg', function (event) {\n            actualSize(event, _this.core.___slide[_this.core.index].querySelector('.lg-image'), _this.core.index, true);\n          }); // Reset zoom on slide change\n\n          utils.on(_this.core.el, 'onBeforeSlide.lgtm', function () {\n            scale = 1;\n\n            _this.resetZoom();\n          }); // Drag option after zoom\n\n          if (!_this.core.isTouch) {\n            _this.zoomDrag();\n          }\n\n          if (_this.core.isTouch) {\n            _this.zoomSwipe();\n          }\n        }; // Reset zoom effect\n\n\n        Zoom.prototype.resetZoom = function () {\n          utils.removeClass(this.core.outer, 'lg-zoomed');\n\n          for (var i = 0; i < this.core.___slide.length; i++) {\n            if (this.core.___slide[i].querySelector('.lg-img-wrap')) {\n              this.core.___slide[i].querySelector('.lg-img-wrap').removeAttribute('style');\n\n              this.core.___slide[i].querySelector('.lg-img-wrap').removeAttribute('data-x');\n\n              this.core.___slide[i].querySelector('.lg-img-wrap').removeAttribute('data-y');\n            }\n          }\n\n          for (var j = 0; j < this.core.___slide.length; j++) {\n            if (this.core.___slide[j].querySelector('.lg-image')) {\n              this.core.___slide[j].querySelector('.lg-image').removeAttribute('style');\n\n              this.core.___slide[j].querySelector('.lg-image').removeAttribute('data-scale');\n            }\n          } // Reset pagx pagy values to center\n\n\n          this.pageX = window.innerWidth / 2;\n          this.pageY = window.innerHeight / 2 + (document.documentElement.scrollTop || document.body.scrollTop);\n        };\n\n        Zoom.prototype.zoomSwipe = function () {\n          var _this = this;\n\n          var startCoords = {};\n          var endCoords = {};\n          var isMoved = false; // Allow x direction drag\n\n          var allowX = false; // Allow Y direction drag\n\n          var allowY = false;\n\n          for (var i = 0; i < _this.core.___slide.length; i++) {\n            /*jshint loopfunc: true */\n            utils.on(_this.core.___slide[i], 'touchstart.lg', function (e) {\n              if (utils.hasClass(_this.core.outer, 'lg-zoomed')) {\n                var image = _this.core.___slide[_this.core.index].querySelector('.lg-object');\n\n                allowY = image.offsetHeight * image.getAttribute('data-scale') > _this.core.outer.querySelector('.lg').clientHeight;\n                allowX = image.offsetWidth * image.getAttribute('data-scale') > _this.core.outer.querySelector('.lg').clientWidth;\n\n                if (allowX || allowY) {\n                  e.preventDefault();\n                  startCoords = {\n                    x: e.targetTouches[0].pageX,\n                    y: e.targetTouches[0].pageY\n                  };\n                }\n              }\n            });\n          }\n\n          for (var j = 0; j < _this.core.___slide.length; j++) {\n            /*jshint loopfunc: true */\n            utils.on(_this.core.___slide[j], 'touchmove.lg', function (e) {\n              if (utils.hasClass(_this.core.outer, 'lg-zoomed')) {\n                var _el = _this.core.___slide[_this.core.index].querySelector('.lg-img-wrap');\n\n                var distanceX;\n                var distanceY;\n                e.preventDefault();\n                isMoved = true;\n                endCoords = {\n                  x: e.targetTouches[0].pageX,\n                  y: e.targetTouches[0].pageY\n                }; // reset opacity and transition duration\n\n                utils.addClass(_this.core.outer, 'lg-zoom-dragging');\n\n                if (allowY) {\n                  distanceY = -Math.abs(_el.getAttribute('data-y')) + (endCoords.y - startCoords.y);\n                } else {\n                  distanceY = -Math.abs(_el.getAttribute('data-y'));\n                }\n\n                if (allowX) {\n                  distanceX = -Math.abs(_el.getAttribute('data-x')) + (endCoords.x - startCoords.x);\n                } else {\n                  distanceX = -Math.abs(_el.getAttribute('data-x'));\n                }\n\n                if (Math.abs(endCoords.x - startCoords.x) > 15 || Math.abs(endCoords.y - startCoords.y) > 15) {\n                  if (_this.core.s.useLeftForZoom) {\n                    _el.style.left = distanceX + 'px';\n                    _el.style.top = distanceY + 'px';\n                  } else {\n                    utils.setVendor(_el, 'Transform', 'translate3d(' + distanceX + 'px, ' + distanceY + 'px, 0)');\n                  }\n                }\n              }\n            });\n          }\n\n          for (var k = 0; k < _this.core.___slide.length; k++) {\n            /*jshint loopfunc: true */\n            utils.on(_this.core.___slide[k], 'touchend.lg', function () {\n              if (utils.hasClass(_this.core.outer, 'lg-zoomed')) {\n                if (isMoved) {\n                  isMoved = false;\n                  utils.removeClass(_this.core.outer, 'lg-zoom-dragging');\n\n                  _this.touchendZoom(startCoords, endCoords, allowX, allowY);\n                }\n              }\n            });\n          }\n        };\n\n        Zoom.prototype.zoomDrag = function () {\n          var _this = this;\n\n          var startCoords = {};\n          var endCoords = {};\n          var isDraging = false;\n          var isMoved = false; // Allow x direction drag\n\n          var allowX = false; // Allow Y direction drag\n\n          var allowY = false;\n\n          for (var i = 0; i < _this.core.___slide.length; i++) {\n            /*jshint loopfunc: true */\n            utils.on(_this.core.___slide[i], 'mousedown.lgzoom', function (e) {\n              // execute only on .lg-object\n              var image = _this.core.___slide[_this.core.index].querySelector('.lg-object');\n\n              allowY = image.offsetHeight * image.getAttribute('data-scale') > _this.core.outer.querySelector('.lg').clientHeight;\n              allowX = image.offsetWidth * image.getAttribute('data-scale') > _this.core.outer.querySelector('.lg').clientWidth;\n\n              if (utils.hasClass(_this.core.outer, 'lg-zoomed')) {\n                if (utils.hasClass(e.target, 'lg-object') && (allowX || allowY)) {\n                  e.preventDefault();\n                  startCoords = {\n                    x: e.pageX,\n                    y: e.pageY\n                  };\n                  isDraging = true; // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\n\n                  _this.core.outer.scrollLeft += 1;\n                  _this.core.outer.scrollLeft -= 1;\n                  utils.removeClass(_this.core.outer, 'lg-grab');\n                  utils.addClass(_this.core.outer, 'lg-grabbing');\n                }\n              }\n            });\n          }\n\n          utils.on(window, 'mousemove.lgzoom', function (e) {\n            if (isDraging) {\n              var _el = _this.core.___slide[_this.core.index].querySelector('.lg-img-wrap');\n\n              var distanceX;\n              var distanceY;\n              isMoved = true;\n              endCoords = {\n                x: e.pageX,\n                y: e.pageY\n              }; // reset opacity and transition duration\n\n              utils.addClass(_this.core.outer, 'lg-zoom-dragging');\n\n              if (allowY) {\n                distanceY = -Math.abs(_el.getAttribute('data-y')) + (endCoords.y - startCoords.y);\n              } else {\n                distanceY = -Math.abs(_el.getAttribute('data-y'));\n              }\n\n              if (allowX) {\n                distanceX = -Math.abs(_el.getAttribute('data-x')) + (endCoords.x - startCoords.x);\n              } else {\n                distanceX = -Math.abs(_el.getAttribute('data-x'));\n              }\n\n              if (_this.core.s.useLeftForZoom) {\n                _el.style.left = distanceX + 'px';\n                _el.style.top = distanceY + 'px';\n              } else {\n                utils.setVendor(_el, 'Transform', 'translate3d(' + distanceX + 'px, ' + distanceY + 'px, 0)');\n              }\n            }\n          });\n          utils.on(window, 'mouseup.lgzoom', function (e) {\n            if (isDraging) {\n              isDraging = false;\n              utils.removeClass(_this.core.outer, 'lg-zoom-dragging'); // Fix for chrome mouse move on click\n\n              if (isMoved && (startCoords.x !== endCoords.x || startCoords.y !== endCoords.y)) {\n                endCoords = {\n                  x: e.pageX,\n                  y: e.pageY\n                };\n\n                _this.touchendZoom(startCoords, endCoords, allowX, allowY);\n              }\n\n              isMoved = false;\n            }\n\n            utils.removeClass(_this.core.outer, 'lg-grabbing');\n            utils.addClass(_this.core.outer, 'lg-grab');\n          });\n        };\n\n        Zoom.prototype.touchendZoom = function (startCoords, endCoords, allowX, allowY) {\n          var _this = this;\n\n          var _el = _this.core.___slide[_this.core.index].querySelector('.lg-img-wrap');\n\n          var image = _this.core.___slide[_this.core.index].querySelector('.lg-object');\n\n          var distanceX = -Math.abs(_el.getAttribute('data-x')) + (endCoords.x - startCoords.x);\n          var distanceY = -Math.abs(_el.getAttribute('data-y')) + (endCoords.y - startCoords.y);\n          var minY = (_this.core.outer.querySelector('.lg').clientHeight - image.offsetHeight) / 2;\n          var maxY = Math.abs(image.offsetHeight * Math.abs(image.getAttribute('data-scale')) - _this.core.outer.querySelector('.lg').clientHeight + minY);\n          var minX = (_this.core.outer.querySelector('.lg').clientWidth - image.offsetWidth) / 2;\n          var maxX = Math.abs(image.offsetWidth * Math.abs(image.getAttribute('data-scale')) - _this.core.outer.querySelector('.lg').clientWidth + minX);\n\n          if (Math.abs(endCoords.x - startCoords.x) > 15 || Math.abs(endCoords.y - startCoords.y) > 15) {\n            if (allowY) {\n              if (distanceY <= -maxY) {\n                distanceY = -maxY;\n              } else if (distanceY >= -minY) {\n                distanceY = -minY;\n              }\n            }\n\n            if (allowX) {\n              if (distanceX <= -maxX) {\n                distanceX = -maxX;\n              } else if (distanceX >= -minX) {\n                distanceX = -minX;\n              }\n            }\n\n            if (allowY) {\n              _el.setAttribute('data-y', Math.abs(distanceY));\n            } else {\n              distanceY = -Math.abs(_el.getAttribute('data-y'));\n            }\n\n            if (allowX) {\n              _el.setAttribute('data-x', Math.abs(distanceX));\n            } else {\n              distanceX = -Math.abs(_el.getAttribute('data-x'));\n            }\n\n            if (_this.core.s.useLeftForZoom) {\n              _el.style.left = distanceX + 'px';\n              _el.style.top = distanceY + 'px';\n            } else {\n              utils.setVendor(_el, 'Transform', 'translate3d(' + distanceX + 'px, ' + distanceY + 'px, 0)');\n            }\n          }\n        };\n\n        Zoom.prototype.destroy = function () {\n          var _this = this; // Unbind all events added by lightGallery zoom plugin\n\n\n          utils.off(_this.core.el, '.lgzoom');\n          utils.off(window, '.lgzoom');\n\n          for (var i = 0; i < _this.core.___slide.length; i++) {\n            utils.off(_this.core.___slide[i], '.lgzoom');\n          }\n\n          utils.off(_this.core.el, '.lgtmzoom');\n\n          _this.resetZoom();\n\n          clearTimeout(_this.zoomabletimeout);\n          _this.zoomabletimeout = false;\n        };\n\n        window.lgModules.zoom = Zoom;\n      });\n    }, {}]\n  }, {}, [1])(1);\n});","map":null,"metadata":{},"sourceType":"script"}