{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.save = save;\nexports.load = load;\nexports.combineLoads = combineLoads;\nexports.clear = clear;\n\nvar _objectMerge = require('object-merge');\n\nvar _objectMerge2 = _interopRequireDefault(_objectMerge);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar MODULE_NAME = '[Redux-LocalStorage-Simple]';\nvar NAMESPACE_DEFAULT = 'redux_localstorage_simple';\nvar NAMESPACE_SEPARATOR_DEFAULT = '_';\nvar STATES_DEFAULT = [];\nvar IGNORE_STATES_DEFAULT = [];\nvar DEBOUNCE_DEFAULT = 0;\nvar IMMUTABLEJS_DEFAULT = false;\nvar DISABLE_WARNINGS_DEFAULT = false;\nvar debounceTimeout = null; // ---------------------------------------------------\n\n/* warn\r\n\r\n  DESCRIPTION\r\n  ----------\r\n  Write a warning to the console if warnings are enabled\r\n\r\n  PARAMETERS\r\n  ----------\r\n  @disableWarnings (Boolean) - If set to true then the warning is not written to the console\r\n  @warningMessage (String) - The message to write to the console\r\n\r\n*/\n\nfunction warnConsole(warningMessage) {\n  console.warn(MODULE_NAME, warningMessage);\n}\n\nfunction warnSilent(_warningMessage) {// Empty\n}\n\nvar warn = function warn(disableWarnings) {\n  return disableWarnings ? warnSilent : warnConsole;\n}; // ---------------------------------------------------\n\n/* lensPath\r\n\r\n  DESCRIPTION\r\n  ----------\r\n  Gets inner data from an object based on a specified path\r\n\r\n  PARAMETERS\r\n  ----------\r\n  @path (Array of Strings) - Path used to get an object's inner data\r\n                              e.g. ['prop', 'innerProp']\r\n  @obj (Object) - Object to get inner data from\r\n\r\n  USAGE EXAMPLE\r\n  -------------\r\n  lensPath(\r\n    ['prop', 'innerProp'],\r\n    { prop: { innerProp: 123 } }\r\n  )\r\n\r\n    returns\r\n\r\n  123\r\n*/\n\n\nfunction lensPath(path, obj) {\n  if (obj === undefined) {\n    return null;\n  } else if (path.length === 1) {\n    return obj[path[0]];\n  } else {\n    return lensPath(path.slice(1), obj[path[0]]);\n  }\n} // ---------------------------------------------------\n\n/* realiseObject\r\n\r\n  DESCRIPTION\r\n  ----------\r\n  Create an object from a specified path, with\r\n  the innermost property set with an initial value\r\n\r\n  PARAMETERS\r\n  ----------\r\n  @objectPath (String) - Object path e.g. 'myObj.prop1.prop2'\r\n  @objectInitialValue (Any, optional) - Value of the innermost property once object is created\r\n\r\n  USAGE EXAMPLE\r\n  -------------\r\n\r\n  realiseObject('myObj.prop1.prop2', 123)\r\n\r\n    returns\r\n\r\n  {\r\n    myObj: {\r\n      prop1: {\r\n          prop2: 123\r\n        }\r\n      }\r\n  }\r\n*/\n\n\nfunction realiseObject(objectPath) {\n  var objectInitialValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  function realiseObject_(objectPathArr, objectInProgress) {\n    if (objectPathArr.length === 0) {\n      return objectInProgress;\n    } else {\n      return realiseObject_(objectPathArr.slice(1), _defineProperty({}, objectPathArr[0], objectInProgress));\n    }\n  }\n\n  return realiseObject_(objectPath.split('.').reverse(), objectInitialValue);\n} // ---------------------------------------------------\n// SafeLocalStorage wrapper to handle the minefield of exceptions\n// that localStorage can throw. JSON.parse() is handled here as well.\n\n\nfunction SafeLocalStorage(warnFn) {\n  this.warnFn = warnFn || warnConsole;\n}\n\nObject.defineProperty(SafeLocalStorage.prototype, 'length', {\n  get: function length() {\n    try {\n      return localStorage.length;\n    } catch (err) {\n      this.warnFn(err);\n    }\n\n    return 0;\n  },\n  configurable: true,\n  enumerable: true\n});\n\nSafeLocalStorage.prototype.key = function key(ind) {\n  try {\n    return localStorage.key(ind);\n  } catch (err) {\n    this.warnFn(err);\n  }\n\n  return null;\n};\n\nSafeLocalStorage.prototype.setItem = function setItem(key, val) {\n  try {\n    localStorage.setItem(key, JSON.stringify(val));\n  } catch (err) {\n    this.warnFn(err);\n  }\n};\n\nSafeLocalStorage.prototype.getItem = function getItem(key) {\n  try {\n    return JSON.parse(localStorage.getItem(key));\n  } catch (err) {\n    this.warnFn(err);\n  }\n\n  return null;\n};\n\nSafeLocalStorage.prototype.removeItem = function removeItem(key) {\n  try {\n    localStorage.removeItem(key);\n  } catch (err) {\n    this.warnFn(err);\n  }\n}; // ---------------------------------------------------\n\n/**\r\n  Saves specified parts of the Redux state tree into localstorage\r\n  Note: this is Redux middleware. Read this for an explanation:\r\n  http://redux.js.org/docs/advanced/Middleware.html\r\n\r\n  PARAMETERS\r\n  ----------\r\n  @config (Object) - Contains configuration options (leave blank to save entire state tree to localstorage)\r\n\r\n            Properties:\r\n              states (Array of Strings, optional) - States to save e.g. ['user', 'products']\r\n              namespace (String, optional) - Namespace to add before your LocalStorage items\r\n              debounce (Number, optional) - Debouncing period (in milliseconds) to wait before saving to LocalStorage\r\n                                            Use this as a performance optimization if you feel you are saving\r\n                                            to LocalStorage too often. Recommended value: 500 - 1000 milliseconds\r\n\r\n  USAGE EXAMPLES\r\n  -------------\r\n\r\n    // save entire state tree - EASIEST OPTION\r\n    save()\r\n\r\n    // save specific parts of the state tree\r\n    save({\r\n      states: ['user', 'products']\r\n    })\r\n\r\n    // save the entire state tree under the namespace 'my_cool_app'. The key 'my_cool_app' will appear in LocalStorage\r\n    save({\r\n      namespace: 'my_cool_app'\r\n    })\r\n\r\n    // save the entire state tree only after a debouncing period of 500 milliseconds has elapsed\r\n    save({\r\n      debounce: 500\r\n    })\r\n\r\n    // save specific parts of the state tree with the namespace 'my_cool_app'. The keys 'my_cool_app_user' and 'my_cool_app_products' will appear in LocalStorage\r\n    save({\r\n        states: ['user', 'products'],\r\n        namespace: 'my_cool_app',\r\n        debounce: 500\r\n    })\r\n*/\n\n\nfunction save() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref$states = _ref.states,\n      states = _ref$states === undefined ? STATES_DEFAULT : _ref$states,\n      _ref$ignoreStates = _ref.ignoreStates,\n      ignoreStates = _ref$ignoreStates === undefined ? IGNORE_STATES_DEFAULT : _ref$ignoreStates,\n      _ref$namespace = _ref.namespace,\n      namespace = _ref$namespace === undefined ? NAMESPACE_DEFAULT : _ref$namespace,\n      _ref$namespaceSeparat = _ref.namespaceSeparator,\n      namespaceSeparator = _ref$namespaceSeparat === undefined ? NAMESPACE_SEPARATOR_DEFAULT : _ref$namespaceSeparat,\n      _ref$debounce = _ref.debounce,\n      debounce = _ref$debounce === undefined ? DEBOUNCE_DEFAULT : _ref$debounce,\n      _ref$disableWarnings = _ref.disableWarnings,\n      disableWarnings = _ref$disableWarnings === undefined ? DISABLE_WARNINGS_DEFAULT : _ref$disableWarnings;\n\n  return function (store) {\n    return function (next) {\n      return function (action) {\n        // Bake disableWarnings into the warn function\n        var warn_ = warn(disableWarnings);\n        var returnValue = next(action);\n        var state_ = void 0; // Validate 'states' parameter\n\n        if (!isArray(states)) {\n          console.error(MODULE_NAME, \"'states' parameter in 'save()' method was passed a non-array value. Setting default value instead. Check your 'save()' method.\");\n          states = STATES_DEFAULT;\n        } // Validate 'ignoreStates' parameter\n\n\n        if (!isArray(ignoreStates)) {\n          console.error(MODULE_NAME, \"'ignoreStates' parameter in 'save()' method was passed a non-array value. Setting default value instead. Check your 'save()' method.\");\n          ignoreStates = IGNORE_STATES_DEFAULT;\n        } // Validate individual entries in'ignoreStates' parameter\n\n\n        if (ignoreStates.length > 0) {\n          ignoreStates = ignoreStates.filter(function (ignoreState) {\n            if (!isString(ignoreState)) {\n              console.error(MODULE_NAME, \"'ignoreStates' array contains a non-string value. Ignoring this value. Check your 'ignoreStates' array.\");\n            } else {\n              return ignoreState;\n            }\n          });\n        } // Validate 'namespace' parameter\n\n\n        if (!isString(namespace)) {\n          console.error(MODULE_NAME, \"'namespace' parameter in 'save()' method was passed a non-string value. Setting default value instead. Check your 'save()' method.\");\n          namespace = NAMESPACE_DEFAULT;\n        } // Validate 'namespaceSeparator' parameter\n\n\n        if (!isString(namespaceSeparator)) {\n          console.error(MODULE_NAME, \"'namespaceSeparator' parameter in 'save()' method was passed a non-string value. Setting default value instead. Check your 'save()' method.\");\n          namespaceSeparator = NAMESPACE_SEPARATOR_DEFAULT;\n        } // Validate 'debounce' parameter\n\n\n        if (!isInteger(debounce)) {\n          console.error(MODULE_NAME, \"'debounce' parameter in 'save()' method was passed a non-integer value. Setting default value instead. Check your 'save()' method.\");\n          debounce = DEBOUNCE_DEFAULT;\n        } // Check if there are states to ignore\n\n\n        if (ignoreStates.length > 0) {\n          state_ = handleIgnoreStates(ignoreStates, store.getState());\n        } else {\n          state_ = store.getState();\n        }\n\n        var storage = new SafeLocalStorage(warn_); // Check to see whether to debounce LocalStorage saving\n\n        if (debounce) {\n          // Clear the debounce timeout if it was previously set\n          if (debounceTimeout) {\n            clearTimeout(debounceTimeout);\n          } // Save to LocalStorage after the debounce period has elapsed\n\n\n          debounceTimeout = setTimeout(function () {\n            _save(states, namespace);\n          }, debounce); // No debouncing necessary so save to LocalStorage right now\n        } else {\n          _save(states, namespace);\n        } // Digs into rootState for the data to put in LocalStorage\n\n\n        function getStateForLocalStorage(state, rootState) {\n          var delimiter = '.';\n\n          if (state.split(delimiter).length > 1) {\n            return lensPath(state.split(delimiter), rootState);\n          } else {\n            return lensPath([state], rootState);\n          }\n        } // Local function to avoid duplication of code above\n\n\n        function _save() {\n          if (states.length === 0) {\n            storage.setItem(namespace, state_);\n          } else {\n            states.forEach(function (state) {\n              var key = namespace + namespaceSeparator + state;\n              var stateForLocalStorage = getStateForLocalStorage(state, state_);\n\n              if (stateForLocalStorage) {\n                storage.setItem(key, stateForLocalStorage);\n              } else {\n                // Make sure nothing is ever saved for this incorrect state\n                storage.removeItem(key);\n              }\n            });\n          }\n        }\n\n        return returnValue;\n      };\n    };\n  };\n}\n/**\r\n  Loads specified states from localstorage into the Redux state tree.\r\n\r\n  PARAMETERS\r\n  ----------\r\n  @config (Object) - Contains configuration options (leave blank to load entire state tree, if it was saved previously that is)\r\n            Properties:\r\n              states (Array of Strings, optional) - Parts of state tree to load e.g. ['user', 'products']\r\n              namespace (String, optional) - Namespace required to retrieve your LocalStorage items, if any\r\n\r\n  Usage examples:\r\n\r\n    // load entire state tree - EASIEST OPTION\r\n    load()\r\n\r\n    // load specific parts of the state tree\r\n    load({\r\n      states: ['user', 'products']\r\n    })\r\n\r\n    // load the entire state tree which was previously saved with the namespace \"my_cool_app\"\r\n    load({\r\n      namespace: 'my_cool_app'\r\n    })\r\n\r\n    // load specific parts of the state tree which was previously saved with the namespace \"my_cool_app\"\r\n    load({\r\n        states: ['user', 'products'],\r\n        namespace: 'my_cool_app'\r\n    })\r\n\r\n*/\n\n\nfunction load() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref2$states = _ref2.states,\n      states = _ref2$states === undefined ? STATES_DEFAULT : _ref2$states,\n      _ref2$immutablejs = _ref2.immutablejs,\n      immutablejs = _ref2$immutablejs === undefined ? IMMUTABLEJS_DEFAULT : _ref2$immutablejs,\n      _ref2$namespace = _ref2.namespace,\n      namespace = _ref2$namespace === undefined ? NAMESPACE_DEFAULT : _ref2$namespace,\n      _ref2$namespaceSepara = _ref2.namespaceSeparator,\n      namespaceSeparator = _ref2$namespaceSepara === undefined ? NAMESPACE_SEPARATOR_DEFAULT : _ref2$namespaceSepara,\n      _ref2$preloadedState = _ref2.preloadedState,\n      preloadedState = _ref2$preloadedState === undefined ? {} : _ref2$preloadedState,\n      _ref2$disableWarnings = _ref2.disableWarnings,\n      disableWarnings = _ref2$disableWarnings === undefined ? DISABLE_WARNINGS_DEFAULT : _ref2$disableWarnings; // Bake disableWarnings into the warn function\n\n\n  var warn_ = warn(disableWarnings); // Validate 'states' parameter\n\n  if (!isArray(states)) {\n    console.error(MODULE_NAME, \"'states' parameter in 'load()' method was passed a non-array value. Setting default value instead. Check your 'load()' method.\");\n    states = STATES_DEFAULT;\n  } // Validate 'namespace' parameter\n\n\n  if (!isString(namespace)) {\n    console.error(MODULE_NAME, \"'namespace' parameter in 'load()' method was passed a non-string value. Setting default value instead. Check your 'load()' method.\");\n    namespace = NAMESPACE_DEFAULT;\n  } // Validate 'namespaceSeparator' parameter\n\n\n  if (!isString(namespaceSeparator)) {\n    console.error(MODULE_NAME, \"'namespaceSeparator' parameter in 'load()' method was passed a non-string value. Setting default value instead. Check your 'load()' method.\");\n    namespaceSeparator = NAMESPACE_SEPARATOR_DEFAULT;\n  } // Display immmutablejs deprecation notice if developer tries to utilise it\n\n\n  if (immutablejs === true) {\n    warn_('Support for Immutable.js data structures has been deprecated as of version 2.0.0. Please use version 1.4.0 if you require this functionality.');\n  }\n\n  var storage = new SafeLocalStorage(warn_);\n  var loadedState = preloadedState; // Load all of the namespaced Redux data from LocalStorage into local Redux state tree\n\n  if (states.length === 0) {\n    var val = storage.getItem(namespace);\n\n    if (val) {\n      loadedState = val;\n    }\n  } else {\n    // Load only specified states into the local Redux state tree\n    states.forEach(function (state) {\n      var key = namespace + namespaceSeparator + state;\n      var val = storage.getItem(key);\n\n      if (val) {\n        loadedState = (0, _objectMerge2.default)(loadedState, realiseObject(state, val));\n      } else {\n        warn_(\"Invalid load '\" + key + \"' provided. Check your 'states' in 'load()'. If this is your first time running this app you may see this message. To disable it in future use the 'disableWarnings' flag, see documentation.\");\n      }\n    });\n  }\n\n  return loadedState;\n}\n/**\r\n  Combines multiple 'load' method calls to return a single state for use in Redux's createStore method.\r\n  Use this when parts of the loading process need to be handled differently e.g. some parts of your state tree use different namespaces\r\n\r\n  PARAMETERS\r\n  ----------\r\n  @loads - 'load' method calls passed into this method as normal arguments\r\n\r\n  Usage example:\r\n\r\n    // Load parts of the state tree saved with different namespaces\r\n    combineLoads(\r\n        load({ states: ['user'], namespace: 'account_stuff' }),\r\n        load({ states: ['products', 'categories'], namespace: 'site_stuff' )\r\n    )\r\n*/\n\n\nfunction combineLoads() {\n  var combinedLoad = {};\n\n  for (var _len = arguments.length, loads = Array(_len), _key = 0; _key < _len; _key++) {\n    loads[_key] = arguments[_key];\n  }\n\n  loads.forEach(function (load) {\n    // Make sure current 'load' is an object\n    if (!isObject(load)) {\n      console.error(MODULE_NAME, \"One or more loads provided to 'combineLoads()' is not a valid object. Ignoring the invalid load/s. Check your 'combineLoads()' method.\");\n      load = {};\n    }\n\n    for (var state in load) {\n      combinedLoad[state] = load[state];\n    }\n  });\n  return combinedLoad;\n}\n/**\r\n  Clears all Redux state tree data from LocalStorage\r\n  Remember to provide a namespace if you used one during the save process\r\n\r\n  PARAMETERS\r\n  ----------\r\n  @config (Object) -Contains configuration options (leave blank to clear entire state tree from LocalStorage, if it was saved without a namespace)\r\n            Properties:\r\n              namespace (String, optional) - Namespace that you used during the save process\r\n\r\n  Usage example:\r\n\r\n    // clear all Redux state tree data saved without a namespace\r\n    clear()\r\n\r\n    // clear Redux state tree data saved with a namespace\r\n    clear({\r\n      namespace: 'my_cool_app'\r\n    })\r\n*/\n\n\nfunction clear() {\n  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref3$namespace = _ref3.namespace,\n      namespace = _ref3$namespace === undefined ? NAMESPACE_DEFAULT : _ref3$namespace,\n      _ref3$disableWarnings = _ref3.disableWarnings,\n      disableWarnings = _ref3$disableWarnings === undefined ? DISABLE_WARNINGS_DEFAULT : _ref3$disableWarnings; // Bake disableWarnings into the warn function\n\n\n  var warn_ = warn(disableWarnings); // Validate 'namespace' parameter\n\n  if (!isString(namespace)) {\n    console.error(MODULE_NAME, \"'namespace' parameter in 'clear()' method was passed a non-string value. Setting default value instead. Check your 'clear()' method.\");\n    namespace = NAMESPACE_DEFAULT;\n  }\n\n  var storage = new SafeLocalStorage(warn_);\n  var len = storage.length;\n\n  for (var ind = 0; ind < len; ind++) {\n    var key = storage.key(ind); // key starts with namespace\n\n    if (key && key.slice(0, namespace.length) === namespace) {\n      storage.removeItem(key);\n    }\n  }\n} // ---------------------------------------------------\n// Utility functions\n\n\nfunction isArray(value) {\n  return Object.prototype.toString.call(value) === '[object Array]';\n}\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nfunction isInteger(value) {\n  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n}\n\nfunction isObject(value) {\n  return value !== null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object';\n} // Removes ignored states from the main state object\n\n\nfunction handleIgnoreStates(ignoreStates, stateFull) {\n  var stateFullMinusIgnoreStates = Object.entries(stateFull).reduce(function (acc, _ref4) {\n    var _ref5 = _slicedToArray(_ref4, 2),\n        key = _ref5[0],\n        value = _ref5[1];\n\n    if (ignoreStates.indexOf(key) === -1) {\n      acc[key] = stateFull[key];\n    }\n\n    return acc;\n  }, {});\n  return stateFullMinusIgnoreStates;\n}","map":null,"metadata":{},"sourceType":"script"}