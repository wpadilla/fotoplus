{"ast":null,"code":"/**!\n * lg-autoplay.js | 1.2.0 | May 20th 2020\n * http://sachinchoolur.github.io/lg-autoplay.js\n * Copyright (c) 2016 Sachin N; \n * @license GPLv3 \n */\n(function (f) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], f);\n  } else {\n    var g;\n\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    } else if (typeof self !== \"undefined\") {\n      g = self;\n    } else {\n      g = this;\n    }\n\n    g.LgAutoplay = f();\n  }\n})(function () {\n  var define, module, exports;\n  return function () {\n    function r(e, n, t) {\n      function o(i, f) {\n        if (!n[i]) {\n          if (!e[i]) {\n            var c = \"function\" == typeof require && require;\n            if (!f && c) return c(i, !0);\n            if (u) return u(i, !0);\n            var a = new Error(\"Cannot find module '\" + i + \"'\");\n            throw a.code = \"MODULE_NOT_FOUND\", a;\n          }\n\n          var p = n[i] = {\n            exports: {}\n          };\n          e[i][0].call(p.exports, function (r) {\n            var n = e[i][1][r];\n            return o(n || r);\n          }, p, p.exports, r, e, n, t);\n        }\n\n        return n[i].exports;\n      }\n\n      for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) {\n        o(t[i]);\n      }\n\n      return o;\n    }\n\n    return r;\n  }()({\n    1: [function (require, module, exports) {\n      (function (global, factory) {\n        if (typeof define === \"function\" && define.amd) {\n          define([], factory);\n        } else if (typeof exports !== \"undefined\") {\n          factory();\n        } else {\n          var mod = {\n            exports: {}\n          };\n          factory();\n          global.lgAutoplay = mod.exports;\n        }\n      })(this, function () {\n        'use strict';\n\n        var _extends = Object.assign || function (target) {\n          for (var i = 1; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            for (var key in source) {\n              if (Object.prototype.hasOwnProperty.call(source, key)) {\n                target[key] = source[key];\n              }\n            }\n          }\n\n          return target;\n        };\n\n        var autoplayDefaults = {\n          autoplay: false,\n          pause: 5000,\n          progressBar: true,\n          fourceAutoplay: false,\n          autoplayControls: true,\n          appendAutoplayControlsTo: '.lg-toolbar'\n        };\n        /**\n         * Creates the autoplay plugin.\n         * @param {object} element - lightGallery element\n         */\n\n        var Autoplay = function Autoplay(element) {\n          this.el = element;\n          this.core = window.lgData[this.el.getAttribute('lg-uid')]; // Execute only if items are above 1\n\n          if (this.core.items.length < 2) {\n            return false;\n          }\n\n          this.core.s = _extends({}, autoplayDefaults, this.core.s);\n          this.interval = false; // Identify if slide happened from autoplay\n\n          this.fromAuto = true; // Identify if autoplay canceled from touch/drag\n\n          this.canceledOnTouch = false; // save fourceautoplay value\n\n          this.fourceAutoplayTemp = this.core.s.fourceAutoplay; // do not allow progress bar if browser does not support css3 transitions\n\n          if (!this.core.doCss()) {\n            this.core.s.progressBar = false;\n          }\n\n          this.init();\n          return this;\n        };\n\n        Autoplay.prototype.init = function () {\n          var _this = this; // append autoplay controls\n\n\n          if (_this.core.s.autoplayControls) {\n            _this.controls();\n          } // Create progress bar\n\n\n          if (_this.core.s.progressBar) {\n            _this.core.outer.querySelector('.lg').insertAdjacentHTML('beforeend', '<div class=\"lg-progress-bar\"><div class=\"lg-progress\"></div></div>');\n          } // set progress\n\n\n          _this.progress(); // Start autoplay\n\n\n          if (_this.core.s.autoplay) {\n            _this.startlAuto();\n          } // cancel interval on touchstart and dragstart\n\n\n          utils.on(_this.el, 'onDragstart.lgtm touchstart.lgtm', function () {\n            if (_this.interval) {\n              _this.cancelAuto();\n\n              _this.canceledOnTouch = true;\n            }\n          }); // restore autoplay if autoplay canceled from touchstart / dragstart\n\n          utils.on(_this.el, 'onDragend.lgtm touchend.lgtm onSlideClick.lgtm', function () {\n            if (!_this.interval && _this.canceledOnTouch) {\n              _this.startlAuto();\n\n              _this.canceledOnTouch = false;\n            }\n          });\n        };\n\n        Autoplay.prototype.progress = function () {\n          var _this = this;\n\n          var _progressBar;\n\n          var _progress;\n\n          utils.on(_this.el, 'onBeforeSlide.lgtm', function () {\n            // start progress bar animation\n            if (_this.core.s.progressBar && _this.fromAuto) {\n              _progressBar = _this.core.outer.querySelector('.lg-progress-bar');\n              _progress = _this.core.outer.querySelector('.lg-progress');\n\n              if (_this.interval) {\n                _progress.removeAttribute('style');\n\n                utils.removeClass(_progressBar, 'lg-start');\n                setTimeout(function () {\n                  utils.setVendor(_progress, 'Transition', 'width ' + (_this.core.s.speed + _this.core.s.pause) + 'ms ease 0s');\n                  utils.addClass(_progressBar, 'lg-start');\n                }, 20);\n              }\n            } // Remove setinterval if slide is triggered manually and fourceautoplay is false\n\n\n            if (!_this.fromAuto && !_this.core.s.fourceAutoplay) {\n              _this.cancelAuto();\n            }\n\n            _this.fromAuto = false;\n          });\n        }; // Manage autoplay via play/stop buttons\n\n\n        Autoplay.prototype.controls = function () {\n          var _this = this;\n\n          var _html = '<button aria-label=\"Toggle autoplay\" class=\"lg-autoplay-button lg-icon\"></button>'; // Append autoplay controls\n\n          _this.core.outer.querySelector(this.core.s.appendAutoplayControlsTo).insertAdjacentHTML('beforeend', _html);\n\n          utils.on(_this.core.outer.querySelector('.lg-autoplay-button'), 'click.lg', function () {\n            if (utils.hasClass(_this.core.outer, 'lg-show-autoplay')) {\n              _this.cancelAuto();\n\n              _this.core.s.fourceAutoplay = false;\n            } else {\n              if (!_this.interval) {\n                _this.startlAuto();\n\n                _this.core.s.fourceAutoplay = _this.fourceAutoplayTemp;\n              }\n            }\n          });\n        }; // Autostart gallery\n\n\n        Autoplay.prototype.startlAuto = function () {\n          var _this = this;\n\n          utils.setVendor(_this.core.outer.querySelector('.lg-progress'), 'Transition', 'width ' + (_this.core.s.speed + _this.core.s.pause) + 'ms ease 0s');\n          utils.addClass(_this.core.outer, 'lg-show-autoplay');\n          utils.addClass(_this.core.outer.querySelector('.lg-progress-bar'), 'lg-start');\n          _this.interval = setInterval(function () {\n            if (_this.core.index + 1 < _this.core.items.length) {\n              _this.core.index++;\n            } else {\n              _this.core.index = 0;\n            }\n\n            _this.fromAuto = true;\n\n            _this.core.slide(_this.core.index, false, false);\n          }, _this.core.s.speed + _this.core.s.pause);\n        }; // cancel Autostart\n\n\n        Autoplay.prototype.cancelAuto = function () {\n          clearInterval(this.interval);\n          this.interval = false;\n\n          if (this.core.outer.querySelector('.lg-progress')) {\n            this.core.outer.querySelector('.lg-progress').removeAttribute('style');\n          }\n\n          utils.removeClass(this.core.outer, 'lg-show-autoplay');\n          utils.removeClass(this.core.outer.querySelector('.lg-progress-bar'), 'lg-start');\n        };\n\n        Autoplay.prototype.destroy = function () {\n          this.cancelAuto();\n\n          if (this.core.outer.querySelector('.lg-progress-bar')) {\n            this.core.outer.querySelector('.lg-progress-bar').parentNode.removeChild(this.core.outer.querySelector('.lg-progress-bar'));\n          }\n        };\n\n        window.lgModules.autoplay = Autoplay;\n      });\n    }, {}]\n  }, {}, [1])(1);\n});","map":null,"metadata":{},"sourceType":"script"}