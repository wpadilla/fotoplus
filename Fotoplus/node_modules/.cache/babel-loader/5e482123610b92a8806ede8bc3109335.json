{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports);\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports);\n    global.lgUtils = mod.exports;\n  }\n})(this, function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  var utils = {\n    getAttribute: function getAttribute(el, label) {\n      return el[label];\n    },\n    setAttribute: function setAttribute(el, label, value) {\n      el[label] = value;\n    },\n    wrap: function wrap(el, className) {\n      if (!el) {\n        return;\n      }\n\n      var wrapper = document.createElement('div');\n      wrapper.className = className;\n      el.parentNode.insertBefore(wrapper, el);\n      el.parentNode.removeChild(el);\n      wrapper.appendChild(el);\n    },\n    addClass: function addClass(el, className) {\n      if (!el) {\n        return;\n      }\n\n      if (el.classList) {\n        el.classList.add(className);\n      } else {\n        el.className += ' ' + className;\n      }\n    },\n    removeClass: function removeClass(el, className) {\n      if (!el) {\n        return;\n      }\n\n      if (el.classList) {\n        el.classList.remove(className);\n      } else {\n        el.className = el.className.replace(new RegExp('(^|\\\\b)' + className.split(' ').join('|') + '(\\\\b|$)', 'gi'), ' ');\n      }\n    },\n    hasClass: function hasClass(el, className) {\n      if (el.classList) {\n        return el.classList.contains(className);\n      } else {\n        return new RegExp('(^| )' + className + '( |$)', 'gi').test(el.className);\n      }\n    },\n    // ex Transform\n    // ex TransitionTimingFunction\n    setVendor: function setVendor(el, property, value) {\n      if (!el) {\n        return;\n      }\n\n      el.style[property.charAt(0).toLowerCase() + property.slice(1)] = value;\n      el.style['webkit' + property] = value;\n      el.style['moz' + property] = value;\n      el.style['ms' + property] = value;\n      el.style['o' + property] = value;\n    },\n    trigger: function trigger(el, event) {\n      var detail = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n      if (!el) {\n        return;\n      }\n\n      var customEvent = new CustomEvent(event, {\n        detail: detail\n      });\n      el.dispatchEvent(customEvent);\n    },\n    Listener: {\n      uid: 0\n    },\n    on: function on(el, events, fn) {\n      var _this = this;\n\n      if (!el) {\n        return;\n      }\n\n      events.split(' ').forEach(function (event) {\n        var _id = _this.getAttribute(el, 'lg-event-uid') || '';\n\n        utils.Listener.uid++;\n        _id += '&' + utils.Listener.uid;\n\n        _this.setAttribute(el, 'lg-event-uid', _id);\n\n        utils.Listener[event + utils.Listener.uid] = fn;\n        el.addEventListener(event.split('.')[0], fn, false);\n      });\n    },\n    off: function off(el, event) {\n      if (!el) {\n        return;\n      }\n\n      var _id = this.getAttribute(el, 'lg-event-uid');\n\n      if (_id) {\n        _id = _id.split('&');\n\n        for (var i = 0; i < _id.length; i++) {\n          if (_id[i]) {\n            var _event = event + _id[i];\n\n            if (_event.substring(0, 1) === '.') {\n              for (var key in utils.Listener) {\n                if (utils.Listener.hasOwnProperty(key)) {\n                  if (key.split('.').indexOf(_event.split('.')[1]) > -1) {\n                    el.removeEventListener(key.split('.')[0], utils.Listener[key]);\n                    this.setAttribute(el, 'lg-event-uid', this.getAttribute(el, 'lg-event-uid').replace('&' + _id[i], ''));\n                    delete utils.Listener[key];\n                  }\n                }\n              }\n            } else {\n              el.removeEventListener(_event.split('.')[0], utils.Listener[_event]);\n              this.setAttribute(el, 'lg-event-uid', this.getAttribute(el, 'lg-event-uid').replace('&' + _id[i], ''));\n              delete utils.Listener[_event];\n            }\n          }\n        }\n      }\n    },\n    param: function param(obj) {\n      return Object.keys(obj).map(function (k) {\n        return encodeURIComponent(k) + '=' + encodeURIComponent(obj[k]);\n      }).join('&');\n    }\n  };\n  exports.default = utils;\n});","map":null,"metadata":{},"sourceType":"script"}